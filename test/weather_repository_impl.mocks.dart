// Mocks generated by Mockito 5.4.4 from annotations
// in flaconi_weather/test/weather_repository_impl.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:flaconi_weather/core/network/network_info.dart' as _i2;
import 'package:flaconi_weather/data/models/forecast_model.dart' as _i3;
import 'package:flaconi_weather/data/services/weather_service.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNetworkInfo_0 extends _i1.SmartFake implements _i2.NetworkInfo {
  _FakeNetworkInfo_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeForecastModel_1 extends _i1.SmartFake implements _i3.ForecastModel {
  _FakeForecastModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [WeatherService].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherService extends _i1.Mock implements _i4.WeatherService {
  MockWeatherService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.NetworkInfo get networkInfo => (super.noSuchMethod(
        Invocation.getter(#networkInfo),
        returnValue: _FakeNetworkInfo_0(
          this,
          Invocation.getter(#networkInfo),
        ),
      ) as _i2.NetworkInfo);

  @override
  _i5.Future<_i3.ForecastModel> fetchWeather(String? city) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchWeather,
          [city],
        ),
        returnValue: _i5.Future<_i3.ForecastModel>.value(_FakeForecastModel_1(
          this,
          Invocation.method(
            #fetchWeather,
            [city],
          ),
        )),
      ) as _i5.Future<_i3.ForecastModel>);

  @override
  _i5.Future<Map<String, double>> getCoordinates(String? city) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCoordinates,
          [city],
        ),
        returnValue: _i5.Future<Map<String, double>>.value(<String, double>{}),
      ) as _i5.Future<Map<String, double>>);

  @override
  _i5.Future<_i3.ForecastModel> fetchForecast(
    double? lat,
    double? lon,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchForecast,
          [
            lat,
            lon,
          ],
        ),
        returnValue: _i5.Future<_i3.ForecastModel>.value(_FakeForecastModel_1(
          this,
          Invocation.method(
            #fetchForecast,
            [
              lat,
              lon,
            ],
          ),
        )),
      ) as _i5.Future<_i3.ForecastModel>);
}
